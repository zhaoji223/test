(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('sa-sdk-javascript')) :
    typeof define === 'function' && define.amd ? define(['sa-sdk-javascript'], factory) :
    (global = global || self, global.sensors_data_utils = factory(global.$sensors));
}(this, (function ($sensors) { 'use strict';

    $sensors = $sensors && $sensors.hasOwnProperty('default') ? $sensors['default'] : $sensors;

    var _stateObj = {};
    var _pageKey = '';


    function init(page_key) {
        if (!page_key) { throw new Error('Invalid argument'); }

        _pageKey = page_key;
        _stateObj = {};

        document.addEventListener('click', onClick);
        document.addEventListener('focusout', onBlur);
    }

    function onClick(e) {
        reportIfNecessary(e.target, 'click');
    }

    function onBlur(e) {
        reportIfNecessary(e.target, 'blur');
    }

    function reportIfNecessary(el, eventType) {
        if (isTargetElement(el) === false) { return; }
        report(getElementKey(el), eventType, el.value);
    }

    function report(elementKey, eventType, value) {
        var eventName = getEventName(eventType);
        var eventData = getEventData(elementKey, eventType, value);
        if (!eventName || !eventData) { return; }

        reportAnalytics(eventName, eventData);
    }

    function getEventData(key, type, value) {
        if (type === 'click' || type === 'popup') {
            return {
                FileName: key,
                FileValue: _pageKey,
                ExtraInfo: toString(),
            }
        }

        if (type === 'blur') {
            return {
                FileName: key,
                FileValue: value,
                ExtraInfo: toString(),
            }
        }
    }

    function getEventName(type) {
        if (type === 'click') { return 'FileClick'; }
        if (type === 'blur') { return _pageKey; }
        if (type === 'popup') { return 'PopupTrack'; }
        return 'default';
    }

    function isTargetElement(el) {
        if (!el) { return false; }
        if (!el.getAttribute || typeof el.getAttribute !== 'function') { return false; }
        if (el.getAttribute('data-sa')) { return true; }
        return false;
    }

    function getElementKey(el) {
        if (!el) { throw new Error('Invalid argument'); }
        if (el && el.getAttribute) {
            return el.getAttribute('data-sa');
        }
        return '';
    }

    function set(key, val) {
        if (!key) { return; }
        if (val === undefined) { return; }

        _stateObj[key] = val;
    }

    function update(obj) {
        for (var key in obj) {
            if (!obj.hasOwnProperty(key)) { continue; }
            set(key, obj[key]);
        }
    }

    /**
     * 上报弹框事件
     **/
    function popup(pop_key) {
        report(pop_key, 'popup');
    }

    function click(element_key) {
        report(element_key, 'click');
    }

    function valueOf() {
        return _stateObj;
    }

    function toString() {
        return JSON.stringify(_stateObj);
    }

    function getKey() {
        return _pageKey;
    }

    function reportAnalytics(eventName, data, numTries) {
        if ( numTries === void 0 ) numTries = 3;

        var sensors = $sensors || window.sensors;
        if (sensors && sensors.track) {
            var extraParams = {
                $url: location.href,
                $referrer: document.referrer,
            };

            var result = Object.assign({}, extraParams, data);
            sensors.track(eventName, result);

            return;
        }

        var numChances = numTries - 1;
        if (numChances <= 0) { return; }

        setTimeout(function () {
            reportAnalytics(eventName, data, numChances);
        }, 500);
    }

    var main = {
        init: init,
        set: set,
        update: update,
        click: click,
        popup: popup,
        valueOf: valueOf,
        toString: toString,
        onClick: onClick,
        onBlur: onBlur,
        getKey: getKey,
        isTargetElement: isTargetElement,
        getElementKey: getElementKey,
        reportIfNecessary: reportIfNecessary,
        getEventName: getEventName,
        getEventData: getEventData,
    };

    return main;

})));
